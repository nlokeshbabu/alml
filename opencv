How to install OpenCV 4.2.0 with CUDA 10.1 on Ubuntu 20.04 LTS (Focal Fossa)


#Install updates and upgrade your system:
       sudo apt update
       sudo apt upgrade
Install required libraries:
•	Generic tools:
   sudo apt install build-essential cmake pkg-config unzip yasm git checkinstall
•	Image I/O libs

  sudo apt install libjpeg-dev libpng-dev libtiff-dev

•	Video/Audio Libs — FFMPEG, GSTREAMER, x264 and so on.

 sudo apt install libavcodec-dev libavformat-dev libswscale-dev libavresample-dev 

 sudo apt install libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev 
 
sudo apt install libxvidcore-dev x264 libx264-dev libfaac-dev libmp3lame-dev libtheora-dev 
 
sudo apt install libfaac-dev libmp3lame-dev libvorbis-dev

•	OpenCore — Adaptive Multi Rate Narrow Band (AMRNB) and Wide Band (AMRWB) speech codec
sudo apt install libopencore-amrnb-dev libopencore-amrwb-dev

•	Cameras programming interface libs
sudo apt-get install libdc1394-22 libdc1394-22-dev libxine2-dev libv4l-dev v4l-utils 
cd /usr/include/linux 
sudo ln -s -f ../libv4l1-videodev.h videodev.h 
cd ~

•	GTK lib for the graphical user functionalites coming from OpenCV highghui module
 sudo apt-get install libgtk-3-dev

•	Python libraries for python3:
sudo apt-get install python3-dev python3-pip 
sudo -H pip3 install -U pip numpy 
sudo apt install python3-testresources

•	Parallelism library C++ for CPU
$ sudo apt-get install libtbb-dev
•	Optimization libraries for OpenCV
$ sudo apt-get install libatlas-base-dev gfortran
•	Optional libraries:
$ sudo apt-get install libprotobuf-dev protobuf-compiler $ sudo apt-get install libgoogle-glog-dev libgflags-dev 
$ sudo apt-get install libgphoto2-dev libeigen3-dev libhdf5-dev doxygen

#We will now proceed with the installation
  $ cd ~
$ wget -O opencv.zip https://github.com/opencv/opencv/archive/4.2.0.zip
$ wget -O opencv_contrib.zip https://github.com/opencv/opencv_contrib/archive/4.2.0.zip
$ unzip opencv.zip
$ unzip opencv_contrib.zip$ echo "Create a virtual environtment for the python binding module"
$ sudo pip install virtualenv virtualenvwrapper
$ sudo rm -rf ~/.cache/pip
$ echo "Edit ~/.bashrc"
$ export WORKON_HOME=$HOME/.virtualenvs
$ export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3
$ source /usr/local/bin/virtualenvwrapper.sh
$ mkvirtualenv cv -p python3
$ pip install numpy$ echo "Procced with the installation"
$ cd opencv-4.2.0
$ mkdir build
$ cd build
$ cmake \
-D CMAKE_BUILD_TYPE=RELEASE \
-D CMAKE_C_COMPILER=/usr/bin/gcc-8 \
-D CMAKE_INSTALL_PREFIX=/usr/local \
-D INSTALL_PYTHON_EXAMPLES=ON \
-D INSTALL_C_EXAMPLES=OFF \
-D WITH_TBB=ON \
-D BUILD_opencv_cudacodec=OFF \
-D ENABLE_FAST_MATH=1 \
-D CUDA_FAST_MATH=1 \
-D WITH_CUDA=ON \
-D WITH_CUBLAS=1 \
-D WITH_V4L=ON \
-D WITH_QT=OFF \
-D WITH_OPENGL=ON \
-D WITH_GSTREAMER=ON \
-D OPENCV_GENERATE_PKGCONFIG=ON \
-D OPENCV_PC_FILE_NAME=opencv.pc \
-D OPENCV_ENABLE_NONFREE=ON \
-D OPENCV_PYTHON3_INSTALL_PATH=~/.virtualenvs/cv/lib/python3.8/site-packages \
-D OPENCV_EXTRA_MODULES_PATH=~/opencv_contrib-4.5.0/modules \
-D PYTHON_EXECUTABLE=~/.virtualenvs/cv/bin/python \
-D BUILD_EXAMPLES=ON \
-D WITH_CUDNN=ON \
-D OPENCV_DNN_CUDA=ON \
-D CUDA_ARCH_BIN=8.0 ..
 And enter
Here you check the cuda_arch_bin version 
 https://developer.nvidia.com/cuda-gpus

If it is fine proceed with the compilation (Use nproc to know the number of cpu cores):
$ nproc
$ make -j8
$ sudo make install
Include the libs in your environment
$ sudo /bin/bash -c 'echo "/usr/local/lib" >> /etc/ld.so.conf.d/opencv.conf'
$ sudo ldconfig

# in terminal type $python3 and type the following

Just check it's version
import cv2
print(cv2.__version__)


